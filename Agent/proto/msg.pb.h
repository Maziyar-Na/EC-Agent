// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace msg_struct {
class ECMessage;
class ECMessageDefaultTypeInternal;
extern ECMessageDefaultTypeInternal _ECMessage_default_instance_;
}  // namespace msg_struct
PROTOBUF_NAMESPACE_OPEN
template<> ::msg_struct::ECMessage* Arena::CreateMaybeMessage<::msg_struct::ECMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg_struct {

// ===================================================================

class ECMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg_struct.ECMessage) */ {
 public:
  ECMessage();
  virtual ~ECMessage();

  ECMessage(const ECMessage& from);
  ECMessage(ECMessage&& from) noexcept
    : ECMessage() {
    *this = ::std::move(from);
  }

  inline ECMessage& operator=(const ECMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ECMessage& operator=(ECMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ECMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ECMessage* internal_default_instance() {
    return reinterpret_cast<const ECMessage*>(
               &_ECMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ECMessage& a, ECMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ECMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ECMessage* New() const final {
    return CreateMaybeMessage<ECMessage>(nullptr);
  }

  ECMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ECMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ECMessage& from);
  void MergeFrom(const ECMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ECMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg_struct.ECMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2eproto);
    return ::descriptor_table_msg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIpFieldNumber = 1,
    kPayloadStringFieldNumber = 16,
    kCgroupIdFieldNumber = 2,
    kReqTypeFieldNumber = 3,
    kRsrcAmntFieldNumber = 4,
    kRequestFieldNumber = 5,
    kRuntimeRemainingFieldNumber = 6,
  };
  // optional string client_ip = 1;
  bool has_client_ip() const;
  private:
  bool _internal_has_client_ip() const;
  public:
  void clear_client_ip();
  const std::string& client_ip() const;
  void set_client_ip(const std::string& value);
  void set_client_ip(std::string&& value);
  void set_client_ip(const char* value);
  void set_client_ip(const char* value, size_t size);
  std::string* mutable_client_ip();
  std::string* release_client_ip();
  void set_allocated_client_ip(std::string* client_ip);
  private:
  const std::string& _internal_client_ip() const;
  void _internal_set_client_ip(const std::string& value);
  std::string* _internal_mutable_client_ip();
  public:

  // optional string payload_string = 16;
  bool has_payload_string() const;
  private:
  bool _internal_has_payload_string() const;
  public:
  void clear_payload_string();
  const std::string& payload_string() const;
  void set_payload_string(const std::string& value);
  void set_payload_string(std::string&& value);
  void set_payload_string(const char* value);
  void set_payload_string(const char* value, size_t size);
  std::string* mutable_payload_string();
  std::string* release_payload_string();
  void set_allocated_payload_string(std::string* payload_string);
  private:
  const std::string& _internal_payload_string() const;
  void _internal_set_payload_string(const std::string& value);
  std::string* _internal_mutable_payload_string();
  public:

  // optional int32 cgroup_id = 2;
  bool has_cgroup_id() const;
  private:
  bool _internal_has_cgroup_id() const;
  public:
  void clear_cgroup_id();
  ::PROTOBUF_NAMESPACE_ID::int32 cgroup_id() const;
  void set_cgroup_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cgroup_id() const;
  void _internal_set_cgroup_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 req_type = 3;
  bool has_req_type() const;
  private:
  bool _internal_has_req_type() const;
  public:
  void clear_req_type();
  ::PROTOBUF_NAMESPACE_ID::int32 req_type() const;
  void set_req_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_req_type() const;
  void _internal_set_req_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rsrc_amnt = 4;
  bool has_rsrc_amnt() const;
  private:
  bool _internal_has_rsrc_amnt() const;
  public:
  void clear_rsrc_amnt();
  ::PROTOBUF_NAMESPACE_ID::int32 rsrc_amnt() const;
  void set_rsrc_amnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rsrc_amnt() const;
  void _internal_set_rsrc_amnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 request = 5;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  ::PROTOBUF_NAMESPACE_ID::int32 request() const;
  void set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request() const;
  void _internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 runtime_remaining = 6;
  bool has_runtime_remaining() const;
  private:
  bool _internal_has_runtime_remaining() const;
  public:
  void clear_runtime_remaining();
  ::PROTOBUF_NAMESPACE_ID::int32 runtime_remaining() const;
  void set_runtime_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_runtime_remaining() const;
  void _internal_set_runtime_remaining(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg_struct.ECMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_string_;
  ::PROTOBUF_NAMESPACE_ID::int32 cgroup_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 req_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 rsrc_amnt_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_;
  ::PROTOBUF_NAMESPACE_ID::int32 runtime_remaining_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ECMessage

// optional string client_ip = 1;
inline bool ECMessage::_internal_has_client_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ECMessage::has_client_ip() const {
  return _internal_has_client_ip();
}
inline void ECMessage::clear_client_ip() {
  client_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ECMessage::client_ip() const {
  // @@protoc_insertion_point(field_get:msg_struct.ECMessage.client_ip)
  return _internal_client_ip();
}
inline void ECMessage::set_client_ip(const std::string& value) {
  _internal_set_client_ip(value);
  // @@protoc_insertion_point(field_set:msg_struct.ECMessage.client_ip)
}
inline std::string* ECMessage::mutable_client_ip() {
  // @@protoc_insertion_point(field_mutable:msg_struct.ECMessage.client_ip)
  return _internal_mutable_client_ip();
}
inline const std::string& ECMessage::_internal_client_ip() const {
  return client_ip_.GetNoArena();
}
inline void ECMessage::_internal_set_client_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ECMessage::set_client_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  client_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg_struct.ECMessage.client_ip)
}
inline void ECMessage::set_client_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_struct.ECMessage.client_ip)
}
inline void ECMessage::set_client_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  client_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_struct.ECMessage.client_ip)
}
inline std::string* ECMessage::_internal_mutable_client_ip() {
  _has_bits_[0] |= 0x00000001u;
  return client_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ECMessage::release_client_ip() {
  // @@protoc_insertion_point(field_release:msg_struct.ECMessage.client_ip)
  if (!_internal_has_client_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return client_ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ECMessage::set_allocated_client_ip(std::string* client_ip) {
  if (client_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_ip);
  // @@protoc_insertion_point(field_set_allocated:msg_struct.ECMessage.client_ip)
}

// optional int32 cgroup_id = 2;
inline bool ECMessage::_internal_has_cgroup_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ECMessage::has_cgroup_id() const {
  return _internal_has_cgroup_id();
}
inline void ECMessage::clear_cgroup_id() {
  cgroup_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ECMessage::_internal_cgroup_id() const {
  return cgroup_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ECMessage::cgroup_id() const {
  // @@protoc_insertion_point(field_get:msg_struct.ECMessage.cgroup_id)
  return _internal_cgroup_id();
}
inline void ECMessage::_internal_set_cgroup_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  cgroup_id_ = value;
}
inline void ECMessage::set_cgroup_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cgroup_id(value);
  // @@protoc_insertion_point(field_set:msg_struct.ECMessage.cgroup_id)
}

// optional int32 req_type = 3;
inline bool ECMessage::_internal_has_req_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ECMessage::has_req_type() const {
  return _internal_has_req_type();
}
inline void ECMessage::clear_req_type() {
  req_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ECMessage::_internal_req_type() const {
  return req_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ECMessage::req_type() const {
  // @@protoc_insertion_point(field_get:msg_struct.ECMessage.req_type)
  return _internal_req_type();
}
inline void ECMessage::_internal_set_req_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  req_type_ = value;
}
inline void ECMessage::set_req_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_req_type(value);
  // @@protoc_insertion_point(field_set:msg_struct.ECMessage.req_type)
}

// optional int32 rsrc_amnt = 4;
inline bool ECMessage::_internal_has_rsrc_amnt() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ECMessage::has_rsrc_amnt() const {
  return _internal_has_rsrc_amnt();
}
inline void ECMessage::clear_rsrc_amnt() {
  rsrc_amnt_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ECMessage::_internal_rsrc_amnt() const {
  return rsrc_amnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ECMessage::rsrc_amnt() const {
  // @@protoc_insertion_point(field_get:msg_struct.ECMessage.rsrc_amnt)
  return _internal_rsrc_amnt();
}
inline void ECMessage::_internal_set_rsrc_amnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  rsrc_amnt_ = value;
}
inline void ECMessage::set_rsrc_amnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rsrc_amnt(value);
  // @@protoc_insertion_point(field_set:msg_struct.ECMessage.rsrc_amnt)
}

// optional int32 request = 5;
inline bool ECMessage::_internal_has_request() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ECMessage::has_request() const {
  return _internal_has_request();
}
inline void ECMessage::clear_request() {
  request_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ECMessage::_internal_request() const {
  return request_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ECMessage::request() const {
  // @@protoc_insertion_point(field_get:msg_struct.ECMessage.request)
  return _internal_request();
}
inline void ECMessage::_internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  request_ = value;
}
inline void ECMessage::set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:msg_struct.ECMessage.request)
}

// optional int32 runtime_remaining = 6;
inline bool ECMessage::_internal_has_runtime_remaining() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ECMessage::has_runtime_remaining() const {
  return _internal_has_runtime_remaining();
}
inline void ECMessage::clear_runtime_remaining() {
  runtime_remaining_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ECMessage::_internal_runtime_remaining() const {
  return runtime_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ECMessage::runtime_remaining() const {
  // @@protoc_insertion_point(field_get:msg_struct.ECMessage.runtime_remaining)
  return _internal_runtime_remaining();
}
inline void ECMessage::_internal_set_runtime_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  runtime_remaining_ = value;
}
inline void ECMessage::set_runtime_remaining(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_runtime_remaining(value);
  // @@protoc_insertion_point(field_set:msg_struct.ECMessage.runtime_remaining)
}

// optional string payload_string = 16;
inline bool ECMessage::_internal_has_payload_string() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ECMessage::has_payload_string() const {
  return _internal_has_payload_string();
}
inline void ECMessage::clear_payload_string() {
  payload_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ECMessage::payload_string() const {
  // @@protoc_insertion_point(field_get:msg_struct.ECMessage.payload_string)
  return _internal_payload_string();
}
inline void ECMessage::set_payload_string(const std::string& value) {
  _internal_set_payload_string(value);
  // @@protoc_insertion_point(field_set:msg_struct.ECMessage.payload_string)
}
inline std::string* ECMessage::mutable_payload_string() {
  // @@protoc_insertion_point(field_mutable:msg_struct.ECMessage.payload_string)
  return _internal_mutable_payload_string();
}
inline const std::string& ECMessage::_internal_payload_string() const {
  return payload_string_.GetNoArena();
}
inline void ECMessage::_internal_set_payload_string(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  payload_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ECMessage::set_payload_string(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  payload_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg_struct.ECMessage.payload_string)
}
inline void ECMessage::set_payload_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  payload_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_struct.ECMessage.payload_string)
}
inline void ECMessage::set_payload_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  payload_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_struct.ECMessage.payload_string)
}
inline std::string* ECMessage::_internal_mutable_payload_string() {
  _has_bits_[0] |= 0x00000002u;
  return payload_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ECMessage::release_payload_string() {
  // @@protoc_insertion_point(field_release:msg_struct.ECMessage.payload_string)
  if (!_internal_has_payload_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return payload_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ECMessage::set_allocated_payload_string(std::string* payload_string) {
  if (payload_string != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  payload_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_string);
  // @@protoc_insertion_point(field_set_allocated:msg_struct.ECMessage.payload_string)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg_struct

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
