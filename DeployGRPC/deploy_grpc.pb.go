// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ec_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeployerExportClient is the client API for DeployerExport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeployerExportClient interface {
	// Sends a greeting
	ReportPodSpec(ctx context.Context, in *ExportPodSpec, opts ...grpc.CallOption) (*PodSpecReply, error)
	DeletePod(ctx context.Context, in *ExportDeletePod, opts ...grpc.CallOption) (*DeletePodReply, error)
	ReportAppSpec(ctx context.Context, in *ExportAppSpec, opts ...grpc.CallOption) (*AppSpecReply, error)
}

type deployerExportClient struct {
	cc grpc.ClientConnInterface
}

func NewDeployerExportClient(cc grpc.ClientConnInterface) DeployerExportClient {
	return &deployerExportClient{cc}
}

func (c *deployerExportClient) ReportPodSpec(ctx context.Context, in *ExportPodSpec, opts ...grpc.CallOption) (*PodSpecReply, error) {
	out := new(PodSpecReply)
	err := c.cc.Invoke(ctx, "/ec.rpc.DeployerExport/ReportPodSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployerExportClient) DeletePod(ctx context.Context, in *ExportDeletePod, opts ...grpc.CallOption) (*DeletePodReply, error) {
	out := new(DeletePodReply)
	err := c.cc.Invoke(ctx, "/ec.rpc.DeployerExport/DeletePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployerExportClient) ReportAppSpec(ctx context.Context, in *ExportAppSpec, opts ...grpc.CallOption) (*AppSpecReply, error) {
	out := new(AppSpecReply)
	err := c.cc.Invoke(ctx, "/ec.rpc.DeployerExport/ReportAppSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeployerExportServer is the server API for DeployerExport service.
// All implementations must embed UnimplementedDeployerExportServer
// for forward compatibility
type DeployerExportServer interface {
	// Sends a greeting
	ReportPodSpec(context.Context, *ExportPodSpec) (*PodSpecReply, error)
	DeletePod(context.Context, *ExportDeletePod) (*DeletePodReply, error)
	ReportAppSpec(context.Context, *ExportAppSpec) (*AppSpecReply, error)
	mustEmbedUnimplementedDeployerExportServer()
}

// UnimplementedDeployerExportServer must be embedded to have forward compatible implementations.
type UnimplementedDeployerExportServer struct {
}

func (UnimplementedDeployerExportServer) ReportPodSpec(context.Context, *ExportPodSpec) (*PodSpecReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportPodSpec not implemented")
}
func (UnimplementedDeployerExportServer) DeletePod(context.Context, *ExportDeletePod) (*DeletePodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePod not implemented")
}
func (UnimplementedDeployerExportServer) ReportAppSpec(context.Context, *ExportAppSpec) (*AppSpecReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAppSpec not implemented")
}
func (UnimplementedDeployerExportServer) mustEmbedUnimplementedDeployerExportServer() {}

// UnsafeDeployerExportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeployerExportServer will
// result in compilation errors.
type UnsafeDeployerExportServer interface {
	mustEmbedUnimplementedDeployerExportServer()
}

func RegisterDeployerExportServer(s grpc.ServiceRegistrar, srv DeployerExportServer) {
	s.RegisterService(&DeployerExport_ServiceDesc, srv)
}

func _DeployerExport_ReportPodSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportPodSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerExportServer).ReportPodSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ec.rpc.DeployerExport/ReportPodSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerExportServer).ReportPodSpec(ctx, req.(*ExportPodSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployerExport_DeletePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportDeletePod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerExportServer).DeletePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ec.rpc.DeployerExport/DeletePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerExportServer).DeletePod(ctx, req.(*ExportDeletePod))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployerExport_ReportAppSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportAppSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerExportServer).ReportAppSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ec.rpc.DeployerExport/ReportAppSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerExportServer).ReportAppSpec(ctx, req.(*ExportAppSpec))
	}
	return interceptor(ctx, in, info, handler)
}

// DeployerExport_ServiceDesc is the grpc.ServiceDesc for DeployerExport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeployerExport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ec.rpc.DeployerExport",
	HandlerType: (*DeployerExportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportPodSpec",
			Handler:    _DeployerExport_ReportPodSpec_Handler,
		},
		{
			MethodName: "DeletePod",
			Handler:    _DeployerExport_DeletePod_Handler,
		},
		{
			MethodName: "ReportAppSpec",
			Handler:    _DeployerExport_ReportAppSpec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deploy.proto",
}
